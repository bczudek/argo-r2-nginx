name: Continuous-Integration-Delivery-Dev

on:
  push:
    branches: [ "dev" ]
    paths-ignore:
      - 'ci-cd/helm/**'
      - index.html
  pull_request:
    branches: [ "dev" ]
    paths-ignore:
      - 'ci-cd/helm/**'
      - index.html
  workflow_dispatch:

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: none
  issues: read
  discussions: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: write
  security-events: read
  statuses: read

jobs:
  build:
    name: Build, test and deliver image from dev branch
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.BCZUDEK_ARGO_PAT }}

    - name: Set versions env
      if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && github.ref_name == 'dev' }}
      id: setEnv
      run: |
        VERSION_MAJOR=$(grep 'Major:' index.html | sed 's/[^0-9]*//g')
        VERSION_MINOR=$(grep 'Minor:' index.html | sed 's/[^0-9]*//g')
        VERSION_PATCH=${GITHUB_SHA::7}

        sed -i "s/\(Patch: \).*<\/p>/\1$VERSION_PATCH<\/p>/" index.html

        VERSION_FULL=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH
        BRANCH_NAME=${{github.ref_name}}
        
        echo "$VERSION_FULL=VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH" >> $GITHUB_ENV
        echo "IMAGE_REF_DEV=${{ secrets.ACR_URL }}/r2.nginx:dev-$VERSION_FULL" >> $GITHUB_ENV

        echo "VERSION_MAJOR=$(grep 'Major:' index.html | sed 's/[^0-9]*//g')" >> $GITHUB_OUTPUT
        echo "VERSION_MINOR=$(grep 'Minor:' index.html | sed 's/[^0-9]*//g')" >> $GITHUB_OUTPUT
        echo "VERSION_PATCH=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        echo "VERSION_FULL=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
    
    - name: Build an image from Dockerfile
      if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && github.ref_name == 'dev' }}
      run: |
        docker build -t $IMAGE_REF_DEV -f ci-cd/docker/Dockerfile .
        docker login ${{ secrets.ACR_URL }} --username ${{ secrets.ACR_USERNAME }} --password ${{ secrets.ACR_PASSWORD }}
        docker push $IMAGE_REF_DEV

    - name: Publish deployment to local repository
      if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && github.ref_name == 'dev' }}
      run: |
        git config --global user.email "githubactions@github.com"
        git config --global user.name "GitHub Actions"
        git config pull.rebase false
        git checkout -B ${{ github.ref_name }}
        git pull origin ${{ github.ref_name }} || echo "Nothing to pull"

        git add -f index.html
        git commit -m "Updated version of the application: $VERSION_FULL"
        git push -u origin ${{ github.ref_name }}

    outputs:
      version_major: "${{ steps.setEnv.outputs.VERSION_MAJOR }}"
      version_minor: "${{ steps.setEnv.outputs.VERSION_MINOR }}"
      version_patch: "${{ steps.setEnv.outputs.VERSION_PATCH }}"
      version_full: "${{ steps.setEnv.outputs.VERSION_FULL }}"
      branch_name: "${{ steps.setEnv.outputs.BRANCH_NAME }}"
   
  deploy-to-dev-preprod:
    needs: build
    if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && github.ref == 'refs/heads/dev' }}
    name: Upload helm to deployment repository
    uses: ./.github/workflows/continuous-deployment-dev.yml
    with:
      sha: ${{ github.sha }}
      version_major: ${{ needs.build.outputs.version_major }}
      version_minor: ${{ needs.build.outputs.version_minor }}
      version_patch: ${{ needs.build.outputs.version_patch }}
      version_full: ${{ needs.build.outputs.version_full }}
      branch_name: ${{ needs.build.outputs.branch_name }}
    secrets: inherit
